buildscript {
    ext {
        springBootVersion = '1.5.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'

group = 'com.infob'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.infob.dummygradle.DummygradleApplication'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://localhost:9000'
        property "sonar.login", "admin"
        property "sonar.password", "Admin123"
        property "sonar.projectKey", "employeemanagement1"
        property 'sonar.projectName', 'emp12'
        property 'sonar.java.source', 8
        property 'encoding', 'UTF-8'
        property 'charSet', 'UTF-8'
    }
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    runtime('org.springframework.boot:spring-boot-devtools')
    runtime('mysql:mysql-connector-java:8.0.13')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
  useJUnitPlatform()
}

tasks.withType(Test){
scanForTestClasses = false
include "**/*Test.class"
 }